<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 运营分析 -->
<mapper namespace="com.adpanshi.cashloan.manage.cl.mapper.expand.OperateDataMapper">
	<!-- 逾期罚息 -->
	<sql id="penaltyAmout">
		select sum(penalty_amout) penaltyAmout,repay_time time from ( select  penalty_amout,DATE_FORMAT(repay_time,#{dateType,jdbcType=VARCHAR}) repay_time from cl_borrow_repay where state = '20' and penalty_day > 0 ) t GROUP BY repay_time
	</sql>
	<!-- 放款笔数 -->
	<sql id="loanCount">
		select count(borrow_id) loanCount,create_time time from (select borrow_id,DATE_FORMAT(create_time,#{dateType,jdbcType=VARCHAR}) create_time from cl_borrow_progress where state = '30' ) t GROUP BY create_time 
	</sql>
	<!-- 还款金额 -->
	<sql id="repayAmt">
		select sum(amount) repayAmt,create_time time from (select (br.amount+br.penalty_amout) amount,DATE_FORMAT(bp.create_time,#{dateType,jdbcType=VARCHAR}) create_time from cl_borrow_progress bp LEFT JOIN cl_borrow_repay br on br.borrow_id = bp.borrow_id where bp.state = '40' ) t GROUP BY create_time 
	</sql>
	<!-- 逾期还款笔数 -->
	<sql id="overdueCount">
		select count(borrow_id) overdueCount,create_time time from (select borrow_id,DATE_FORMAT(create_time,#{dateType,jdbcType=VARCHAR}) create_time from cl_borrow_progress where state = '50' and DATE_FORMAT(create_time,#{dateType,jdbcType=VARCHAR}) >  DATE_FORMAT(create_time,#{dateType,jdbcType=VARCHAR})) t GROUP BY create_time
	</sql>
	<!-- 还款笔数 -->
	<sql id="repayCount">
		select count(borrow_id) repayCount,create_time time from (select borrow_id,DATE_FORMAT(create_time,#{dateType,jdbcType=VARCHAR}) create_time from cl_borrow_progress where state = '40' ) t GROUP BY create_time 
	</sql>
	
	<!-- 还款分析  每日：格式串传%Y-%m-%d  每月 ：%Y-%m  -->
	<select id="repayAnalisis" parameterType="java.util.Map" resultType="com.adpanshi.cashloan.manage.cl.pojo.RepayAnalisisModel">
		select DISTINCT(p.time) date,
			case when p2.repayCount is null then 0 else p2.repayCount end repayCount,
			case when p3.overdueCount is null then 0 else p3.overdueCount end overdueCount,
			case when p4.repayAmt is null then 0 else p4.repayAmt end repayAmt,
			case when p5.loanCount is null then 0 else p5.loanCount end loanCount,
			case when p6.penaltyAmout is null then 0 else p6.penaltyAmout end penaltyAmout
		from (
			(<include refid="repayCount"></include>) UNION
			(<include refid="overdueCount"></include>) UNION
			(<include refid="repayAmt"></include>) UNION
			(<include refid="loanCount"></include>) UNION
			(<include refid="penaltyAmout"></include>) 
		) p
		LEFT JOIN (<include refid="repayCount"></include>) p2 on p.time = p2.time
		LEFT JOIN (<include refid="overdueCount"></include>) p3 on p.time = p3.time
		LEFT JOIN (<include refid="repayAmt"></include>) p4 on p.time = p4.time
		LEFT JOIN (<include refid="loanCount"></include>) p5 on p.time = p5.time
		LEFT JOIN (<include refid="penaltyAmout"></include>) p6 on p.time = p6.time
		<where>
			<if test="startDate!=null and startDate!=''">
				and p.time >= #{startDate,jdbcType=VARCHAR}
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[ and p.time <= #{endDate,jdbcType=VARCHAR} ]]> 
			</if>
		</where>
		ORDER BY p.time DESC
	</select>
	
	
	<!-- 逾期金额 -->
	<sql id="overdueAmt">
		select sum(amount) overdueAmt,create_time time from (select (b.amount+b.interest) amount,DATE_FORMAT(bp.create_time,#{dateType,jdbcType=VARCHAR}) create_time from cl_borrow_progress bp LEFT JOIN cl_borrow b on bp.borrow_id = b.id where bp.state = '50' ) t GROUP BY create_time
	</sql>
	<!-- 催收笔数 -->
	<sql id="urgeRepayBorrow">
		select count(DISTINCT(borrow_id)) urgeRepayBorrow,create_time time from ( select borrow_id,DATE_FORMAT(create_time,#{dateType,jdbcType=VARCHAR}) create_time from cl_urge_repay_log ) t GROUP BY create_time
	</sql>
	<sql id="urgeRepayCount">
		select count(id) urgeRepayCount,create_time time from ( select id,DATE_FORMAT(create_time,#{dateType,jdbcType=VARCHAR}) create_time from cl_urge_repay_log ) t GROUP BY create_time
	</sql>
	<!-- 催收成功数 -->
	<sql id="urgeRepaySuccess">
		select count(id) urgeRepaySuccess,create_time time from ( select id,DATE_FORMAT(create_time,#{dateType,jdbcType=VARCHAR}) create_time from cl_urge_repay_log where state = '40') t GROUP BY create_time
	</sql>
	<!-- 坏账笔数 -->
	<sql id="badCount">
		select count(borrow_id) badCount,create_time time from (select bp.borrow_id, DATE_FORMAT(bp.create_time,#{dateType,jdbcType=VARCHAR}) create_time from cl_borrow_progress bp LEFT JOIN cl_borrow b  on bp.borrow_id = b.id where bp.state = '90') t GROUP BY create_time
	</sql>
	
	<!-- 每月逾期统计 每月 ：%Y-%m   -->
	<select id="overdueAnalisis" parameterType="java.util.Map" resultType="com.adpanshi.cashloan.manage.cl.pojo.OverdueAnalisisModel">
		select DISTINCT(p.time) date,
			case when p2.overdueCount is null then 0 else p2.overdueCount end overdueCount,
			case when p3.overdueAmt is null then 0 else p3.overdueAmt end overdueAmt,
			case when p4.penaltyAmout is null then 0 else p4.penaltyAmout end penaltyAmout,
			case when p5.urgeRepayBorrow is null then 0 else p5.urgeRepayBorrow end urgeRepayBorrow,
			case when p6.urgeRepayCount is null then 0 else p6.urgeRepayCount end urgeRepayCount,
			case when p7.urgeRepaySuccess is null then 0 else p7.urgeRepaySuccess end urgeRepaySuccess,
			case when p8.badCount is null then 0 else p8.badCount end badCount
		from (
			(<include refid="overdueCount"></include>) UNION
			(<include refid="overdueAmt"></include>) UNION
			(<include refid="penaltyAmout"></include>) UNION
			(<include refid="urgeRepayBorrow"></include>) UNION
			(<include refid="urgeRepayCount"></include>) UNION
			(<include refid="urgeRepaySuccess"></include>) UNION
			(<include refid="badCount"></include>) 
		) p 
		LEFT JOIN (<include refid="overdueCount"></include>) p2 on p.time = p2.time
		LEFT JOIN (<include refid="overdueAmt"></include>) p3 on p.time = p3.time
		LEFT JOIN (<include refid="penaltyAmout"></include>) p4 on p.time = p4.time
		LEFT JOIN (<include refid="urgeRepayBorrow"></include>) p5 on p.time = p5.time
		LEFT JOIN (<include refid="urgeRepayCount"></include>) p6 on p.time = p6.time
		LEFT JOIN (<include refid="urgeRepaySuccess"></include>) p7 on p.time = p7.time
		LEFT JOIN (<include refid="badCount"></include>) p8 on p.time = p8.time
		<where>
			<if test="startDate!=null and startDate!=''">
				and p.time >= #{startDate,jdbcType=VARCHAR}
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[ and p.time <= #{endDate,jdbcType=VARCHAR} ]]> 
			</if>
		</where>
		ORDER BY p.time DESC
	</select>
	
</mapper>
